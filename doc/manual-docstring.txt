Docstrings and coding issues
============================

.. $Id$

..
    This paragraph is introdictory: this chapter should explain advanced details.


    Python docstrings
    -----------------

    Docstrings are a standard method that can be used by Python developers to
    attach documentation pieces to most Python objects.

    Here is an example module showing different docstrings:

    .. python::

        #!/usr/bin/python
        # -*- coding: latin-1 -*-
        """A Sample Module.

        The first string in the module, starting after the *hashbang* and the
        encoding definition comment, is the module docstring.
        """

        class Foo:
            """
            This is a testing class.

            It doesn't do much stuff, but it's pretty documented. This, for
            example, is the class docstring.
            """

            def getMagic(self):
                """
                A function returning a magic number.

                This is the function documentation.
                """
                return 42

            the_number = property(
                fget=getMagic,
                doc="""This is the property docstring.""")

    Some guidelines for docstring standardization have been published, see for
    example :PEP:`257` for some higl-level convention. No docstring structure
    is enforced anyway by official documentation.


Variable docstrings
-------------------

Python variables don't support docstrings. The variable can be described in the
module or class where it is defined using the tags ``@var``, ``@ivar``,
``@cvar``; but this only allows for a textual description: no further metadata
can be added to the variable (except for the type, using the ``@type`` tag).

Epydoc supports *variable docstrings*: if a variable assignment statement is
immediately followed by a bare string literal, then that assignment is treated
as a docstring for that variable. In classes, variable assignments at the class definition level are considered class variables; and assignments to instance
variables in the constructor (``__init__``) are considered instance variables:

.. python::

    class A:
        x = 22
        """Docstring for class variable A.x"""

        def __init__(self, a):
            self.y = a
            """Docstring for instance variable A.y

Variables may also be documented using *comment docstrings*. If a variable
assignment is immediately preceeded by a comment whose lines begin with the
special marker '``#:``', or is followed on the same line by such a comment,
then it is treated as a docstring for that variable:

.. python::

    #: docstring for x
    x = 22
    x = 22 #: docstring for x

A common Python idiom is to create instance variables settings their default
value in the class instead of the constructor (hopefully if the default is
immutable...). To avoid Epydoc to interpret such variable as a class variable,
you can describe it using the tag ``@ivar`` in the context of a variable
docstring:

.. python::

    class B:
        y = 42
        """@ivar: This is an instance variable."""

Notice that variable docstrings are only available for documentation when the
source code is available for *parsing*: it is not possible to retrieve variable
docstrings from introspection informations only.


Items visibility
----------------

Any Python object (modules, classes, functions, variables...) can be *public*
or *private*. Usually the object name decides the object visibility: objects
whose name starts with an underscore and doesn't end with an underscore are
considered private. All the other objects (including the "magic functions" such
as ``__add__``) are public.

For each module and class, Epydoc generates pages with both public and private
methods. A Javascript snippet allows to toggle the visibility of private
objects.

If a module wants to hide some of the objects it contains (either defined in
the module itself or imported from other modules), it can explicitly list the
names if its `public names`_ in the ``__all__`` variable.

.. _public names: http://www.python.org/doc/2.4.3/ref/import.html

If a module defines the ``__all__`` variable, Epydoc uses its content to decide
if the module objects are public or private.

